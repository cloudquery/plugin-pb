syntax = "proto3";
package cloudquery.plugin.v3;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/cloudquery/plugin-pb-go/pb/plugin/v3;plugin";

service Plugin {
  // Get the name of the plugin
  rpc GetName(GetName.Request) returns (GetName.Response);
  // Get the current version of the plugin
  rpc GetVersion(GetVersion.Request) returns (GetVersion.Response);
  // Configure the plugin with the given credentials and mode
  rpc Init(Init.Request) returns (Init.Response);
  // Get all tables the source plugin supports. Must be called after Init
  rpc GetTables(GetTables.Request) returns (GetTables.Response);
  // Start the sync the source plugin
  rpc Sync(Sync.Request) returns (stream Sync.Response);
  // Write resources
  rpc Write(stream Write.Request) returns (Write.Response);
  // Send signal to flush and close open connections
  rpc Close(Close.Request) returns (Close.Response);
}

enum Registry {
  REGISTRY_UNSPECIFIED = 0;
  REGISTRY_GITHUB = 1;
  REGISTRY_GRPC = 2;
  REGISTRY_LOCAL = 3;
}

message StateBackendSpec {
  string name = 1;
  string path = 2;
  string version = 3;
  Registry registry = 4;
  bytes spec = 5;
}

message GetName {
  message Request {}
  message Response {
    string name = 1;
  }
}

message GetVersion {
  message Request {}
  message Response {
    string version = 1;
  }
}

message Init {
  message Request {
    // Internal plugin-specific spec
    bytes spec = 1;
  }
  message Response {}
}

message GetTables {
  message Request {
    repeated string tables = 1;
    repeated string skip_tables = 2;
  }
  message Response {
    // marshalled []arrow.Schema
    repeated bytes tables = 1;
  }
}

message WriteOptions {
  bool migrate_force = 1;
}

message MessageMigrateTable {
  // marshalled arrow.Schema
  bytes table = 1;
}

message MessageInsert {
  // marshalled arrow.Record
  bytes record = 1;
}

message MessageDeleteStale {
  // marshalled arrow.Schema
  bytes table = 1;
  string source_name = 2;
  google.protobuf.Timestamp sync_time = 3;
}

message Sync {
  message Request {
    repeated string tables = 1;
    repeated string skip_tables = 2;
    StateBackendSpec state_backend = 3;
    bool deterministic_cq_id = 4;
    bool skip_dependent_tables = 5;
  }
  message Response {
    oneof message {
      MessageMigrateTable migrate_table = 1;
      MessageInsert insert = 2;
      MessageDeleteStale delete = 3;
    }
  }
}

message Write {
  message Request {
    oneof message {
      // WriteOptions is only used for the first message
      // to configure the write stream
      WriteOptions options = 1;
      MessageMigrateTable migrate_table = 2;
      MessageInsert insert = 3;
      MessageDeleteStale delete = 4;
    }
  }
  message Response {}
}

message Close {
  message Request {}
  message Response {}
}
