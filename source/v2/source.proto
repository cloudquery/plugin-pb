syntax = "proto3";
package cloudquery.source.v2;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/cloudquery/plugin-pb-go/pb/source/v2;source";

service Source {
  // Get the name of the plugin
  rpc GetName(GetName.Request) returns (GetName.Response);
  // Get the current version of the plugin
  rpc GetVersion(GetVersion.Request) returns (GetVersion.Response);
  // Get all static tables the source plugin supports
  rpc GetTables(GetTables.Request) returns (GetTables.Response);
  // Get metrics for the source plugin
  rpc GetMetrics(GetMetrics.Request) returns (GetMetrics.Response);
  // Configure the plugin with the given credentials and mode
  rpc Init(Init.Request) returns (Init.Response);
  // Get all tables the source plugin supports. Must be called after Init
  rpc GetDynamicTables(GetDynamicTables.Request) returns (GetDynamicTables.Response);
  // Start the sync the source plugin
  rpc Sync(Sync.Request) returns (stream Sync.Response);
  // Generate documentation for the source plugin
  rpc GenDocs(GenDocs.Request) returns (GenDocs.Response);
}

message GetName {
  message Request {}
  message Response {
    string name = 1;
  }
}

message GetVersion {
  message Request {}
  message Response {
    string version = 1;
  }
}

message Init {
  message Request {
    // marshaled specs.Source
    bytes spec = 1;
    
  }
  message Response {}
}

message GetDynamicTables {
  message Request {}
  message Response {
    // marshaled []*schema.Table
    repeated bytes tables = 1;
  }
}

message Sync {
  message Request {
    google.protobuf.Timestamp sync_time = 1;
  }
  message Response {
    // marshalled *arrow.Records
    bytes resource = 1;
  }
}

message GetTables {
  message Request {}
  message Response {
    string name = 1;
    string version = 2;
    // Marshalled []arrow.Schema
    repeated bytes tables = 3;
  }
}

message GetMetrics {
  message Request {}
  message Response {
    // marshalled json of plugins.SourceMetrics
    bytes metrics = 1;
  }
}

message GenDocs {
  enum FORMAT{
    markdown = 0;
    json = 1;
 }
  message Request {
    string path = 1;
    FORMAT format = 2;
  }
  message Response {}
}
